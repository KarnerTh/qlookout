// Code generated by mockery v2.21.4. DO NOT EDIT.

package query

import mock "github.com/stretchr/testify/mock"

// MockQueryRepo is an autogenerated mock type for the QueryRepo type
type MockQueryRepo struct {
	mock.Mock
}

// Query provides a mock function with given fields: queryString
func (_m *MockQueryRepo) Query(queryString string) (QueryResult, error) {
	ret := _m.Called(queryString)

	var r0 QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (QueryResult, error)); ok {
		return rf(queryString)
	}
	if rf, ok := ret.Get(0).(func(string) QueryResult); ok {
		r0 = rf(queryString)
	} else {
		r0 = ret.Get(0).(QueryResult)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(queryString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockQueryRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockQueryRepo creates a new instance of MockQueryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockQueryRepo(t mockConstructorTestingTNewMockQueryRepo) *MockQueryRepo {
	mock := &MockQueryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
