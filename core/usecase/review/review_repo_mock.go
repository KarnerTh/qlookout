// Code generated by mockery v2.21.4. DO NOT EDIT.

package review

import mock "github.com/stretchr/testify/mock"

// MockReviewRepo is an autogenerated mock type for the ReviewRepo type
type MockReviewRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *MockReviewRepo) Create(data ReviewRuleCreate) (*ReviewRule, error) {
	ret := _m.Called(data)

	var r0 *ReviewRule
	var r1 error
	if rf, ok := ret.Get(0).(func(ReviewRuleCreate) (*ReviewRule, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(ReviewRuleCreate) *ReviewRule); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReviewRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ReviewRuleCreate) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MockReviewRepo) Delete(id int) (*ReviewRule, error) {
	ret := _m.Called(id)

	var r0 *ReviewRule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*ReviewRule, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *ReviewRule); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReviewRule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MockReviewRepo) GetById(id int) (*ReviewRule, error) {
	ret := _m.Called(id)

	var r0 *ReviewRule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*ReviewRule, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *ReviewRule); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReviewRule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForLookout provides a mock function with given fields: lookoutId
func (_m *MockReviewRepo) GetForLookout(lookoutId int) ([]ReviewRule, error) {
	ret := _m.Called(lookoutId)

	var r0 []ReviewRule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]ReviewRule, error)); ok {
		return rf(lookoutId)
	}
	if rf, ok := ret.Get(0).(func(int) []ReviewRule); ok {
		r0 = rf(lookoutId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ReviewRule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(lookoutId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, data
func (_m *MockReviewRepo) Update(id int, data ReviewRuleUpdate) (*ReviewRule, error) {
	ret := _m.Called(id, data)

	var r0 *ReviewRule
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ReviewRuleUpdate) (*ReviewRule, error)); ok {
		return rf(id, data)
	}
	if rf, ok := ret.Get(0).(func(int, ReviewRuleUpdate) *ReviewRule); ok {
		r0 = rf(id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReviewRule)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ReviewRuleUpdate) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockReviewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReviewRepo creates a new instance of MockReviewRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReviewRepo(t mockConstructorTestingTNewMockReviewRepo) *MockReviewRepo {
	mock := &MockReviewRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
