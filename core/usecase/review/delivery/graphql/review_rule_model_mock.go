// Code generated by mockery v2.21.4. DO NOT EDIT.

package graphql

import mock "github.com/stretchr/testify/mock"

// MockReviewRuleModel is an autogenerated mock type for the ReviewRuleModel type
type MockReviewRuleModel struct {
	mock.Mock
}

// ColumnName provides a mock function with given fields:
func (_m *MockReviewRuleModel) ColumnName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ColumnType provides a mock function with given fields:
func (_m *MockReviewRuleModel) ColumnType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExactValue provides a mock function with given fields:
func (_m *MockReviewRuleModel) ExactValue() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GreaterThan provides a mock function with given fields:
func (_m *MockReviewRuleModel) GreaterThan() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *MockReviewRuleModel) Id() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// LessThan provides a mock function with given fields:
func (_m *MockReviewRuleModel) LessThan() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// LookoutId provides a mock function with given fields:
func (_m *MockReviewRuleModel) LookoutId() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// RowIndex provides a mock function with given fields:
func (_m *MockReviewRuleModel) RowIndex() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// ShouldBeNull provides a mock function with given fields:
func (_m *MockReviewRuleModel) ShouldBeNull() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewMockReviewRuleModel interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReviewRuleModel creates a new instance of MockReviewRuleModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReviewRuleModel(t mockConstructorTestingTNewMockReviewRuleModel) *MockReviewRuleModel {
	mock := &MockReviewRuleModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
