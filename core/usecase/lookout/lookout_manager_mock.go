// Code generated by mockery v2.21.4. DO NOT EDIT.

package lookout

import mock "github.com/stretchr/testify/mock"

// MockLookoutManager is an autogenerated mock type for the LookoutManager type
type MockLookoutManager struct {
	mock.Mock
}

// Reload provides a mock function with given fields: lookoutId
func (_m *MockLookoutManager) Reload(lookoutId int) {
	_m.Called(lookoutId)
}

// Remove provides a mock function with given fields: lookoutId
func (_m *MockLookoutManager) Remove(lookoutId int) {
	_m.Called(lookoutId)
}

// Start provides a mock function with given fields:
func (_m *MockLookoutManager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: lookoutId
func (_m *MockLookoutManager) Watch(lookoutId int) {
	_m.Called(lookoutId)
}

type mockConstructorTestingTNewMockLookoutManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLookoutManager creates a new instance of MockLookoutManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLookoutManager(t mockConstructorTestingTNewMockLookoutManager) *MockLookoutManager {
	mock := &MockLookoutManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
