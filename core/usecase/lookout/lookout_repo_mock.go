// Code generated by mockery v2.21.4. DO NOT EDIT.

package lookout

import mock "github.com/stretchr/testify/mock"

// MockLookoutRepo is an autogenerated mock type for the LookoutRepo type
type MockLookoutRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *MockLookoutRepo) Create(data LookoutConfigCreate) (*LookoutConfig, error) {
	ret := _m.Called(data)

	var r0 *LookoutConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(LookoutConfigCreate) (*LookoutConfig, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(LookoutConfigCreate) *LookoutConfig); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LookoutConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(LookoutConfigCreate) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MockLookoutRepo) Delete(id int) (*LookoutConfig, error) {
	ret := _m.Called(id)

	var r0 *LookoutConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*LookoutConfig, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *LookoutConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LookoutConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *MockLookoutRepo) Get() ([]LookoutConfig, error) {
	ret := _m.Called()

	var r0 []LookoutConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]LookoutConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []LookoutConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LookoutConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MockLookoutRepo) GetById(id int) (*LookoutConfig, error) {
	ret := _m.Called(id)

	var r0 *LookoutConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*LookoutConfig, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *LookoutConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LookoutConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, data
func (_m *MockLookoutRepo) Update(id int, data LookoutConfigUpdate) (*LookoutConfig, error) {
	ret := _m.Called(id, data)

	var r0 *LookoutConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(int, LookoutConfigUpdate) (*LookoutConfig, error)); ok {
		return rf(id, data)
	}
	if rf, ok := ret.Get(0).(func(int, LookoutConfigUpdate) *LookoutConfig); ok {
		r0 = rf(id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LookoutConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(int, LookoutConfigUpdate) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockLookoutRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLookoutRepo creates a new instance of MockLookoutRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLookoutRepo(t mockConstructorTestingTNewMockLookoutRepo) *MockLookoutRepo {
	mock := &MockLookoutRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
