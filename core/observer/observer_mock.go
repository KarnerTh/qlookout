// Code generated by mockery v2.21.4. DO NOT EDIT.

package observer

import mock "github.com/stretchr/testify/mock"

// MockObserver is an autogenerated mock type for the Observer type
type MockObserver[T interface{}] struct {
	mock.Mock
}

// Publish provides a mock function with given fields: value
func (_m *MockObserver[T]) Publish(value T) {
	_m.Called(value)
}

// Subscribe provides a mock function with given fields:
func (_m *MockObserver[T]) Subscribe() <-chan T {
	ret := _m.Called()

	var r0 <-chan T
	if rf, ok := ret.Get(0).(func() <-chan T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan T)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockObserver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockObserver creates a new instance of MockObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockObserver[T interface{}](t mockConstructorTestingTNewMockObserver) *MockObserver[T] {
	mock := &MockObserver[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
