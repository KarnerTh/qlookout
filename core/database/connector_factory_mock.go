// Code generated by mockery v2.21.4. DO NOT EDIT.

package database

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectorFactory is an autogenerated mock type for the ConnectorFactory type
type MockConnectorFactory struct {
	mock.Mock
}

// NewConnector provides a mock function with given fields: dataSource
func (_m *MockConnectorFactory) NewConnector(dataSource string) (*sql.DB, error) {
	ret := _m.Called(dataSource)

	var r0 *sql.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sql.DB, error)); ok {
		return rf(dataSource)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.DB); ok {
		r0 = rf(dataSource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dataSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockConnectorFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConnectorFactory creates a new instance of MockConnectorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConnectorFactory(t mockConstructorTestingTNewMockConnectorFactory) *MockConnectorFactory {
	mock := &MockConnectorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
